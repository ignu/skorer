#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScoreKeeper.Core
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ScoreKeeper")]
	public partial class ScoreKeeperDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertGameEvent(GameEvent instance);
    partial void UpdateGameEvent(GameEvent instance);
    partial void DeleteGameEvent(GameEvent instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertMatch(Match instance);
    partial void UpdateMatch(Match instance);
    partial void DeleteMatch(Match instance);
    partial void InsertMatchParticipant(MatchParticipant instance);
    partial void UpdateMatchParticipant(MatchParticipant instance);
    partial void DeleteMatchParticipant(MatchParticipant instance);
    partial void InsertMatchEvent(MatchEvent instance);
    partial void UpdateMatchEvent(MatchEvent instance);
    partial void DeleteMatchEvent(MatchEvent instance);
    #endregion
		
		public ScoreKeeperDataContext() : 
				base(global::ScoreKeeper.Core.Properties.Settings.Default.ScoreKeeperConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreKeeperDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreKeeperDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreKeeperDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreKeeperDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<GameEvent> GameEvents
		{
			get
			{
				return this.GetTable<GameEvent>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Match> Matches
		{
			get
			{
				return this.GetTable<Match>();
			}
		}
		
		public System.Data.Linq.Table<MatchParticipant> MatchParticipants
		{
			get
			{
				return this.GetTable<MatchParticipant>();
			}
		}
		
		public System.Data.Linq.Table<MatchEvent> MatchEvents
		{
			get
			{
				return this.GetTable<MatchEvent>();
			}
		}
	}
	
	[Table(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Title;
		
		private EntitySet<GameEvent> _GameEvents;
		
		private EntitySet<Match> _Matches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Game()
		{
			this._GameEvents = new EntitySet<GameEvent>(new Action<GameEvent>(this.attach_GameEvents), new Action<GameEvent>(this.detach_GameEvents));
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="Game_GameEvent", Storage="_GameEvents", OtherKey="GameID")]
		public EntitySet<GameEvent> GameEvents
		{
			get
			{
				return this._GameEvents;
			}
			set
			{
				this._GameEvents.Assign(value);
			}
		}
		
		[Association(Name="Game_Match", Storage="_Matches", OtherKey="GameID")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameEvents(GameEvent entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_GameEvents(GameEvent entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[Table(Name="dbo.GameEvent")]
	public partial class GameEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _Score;
		
		private int _ScoreInterval;
		
		private System.Nullable<int> _ScoreMax;
		
		private int _GameID;
		
		private EntitySet<MatchEvent> _MatchEvents;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    partial void OnScoreIntervalChanging(int value);
    partial void OnScoreIntervalChanged();
    partial void OnScoreMaxChanging(System.Nullable<int> value);
    partial void OnScoreMaxChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    #endregion
		
		public GameEvent()
		{
			this._MatchEvents = new EntitySet<MatchEvent>(new Action<MatchEvent>(this.attach_MatchEvents), new Action<MatchEvent>(this.detach_MatchEvents));
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(64)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[Column(Storage="_ScoreInterval", DbType="Int NOT NULL")]
		public int ScoreInterval
		{
			get
			{
				return this._ScoreInterval;
			}
			set
			{
				if ((this._ScoreInterval != value))
				{
					this.OnScoreIntervalChanging(value);
					this.SendPropertyChanging();
					this._ScoreInterval = value;
					this.SendPropertyChanged("ScoreInterval");
					this.OnScoreIntervalChanged();
				}
			}
		}
		
		[Column(Storage="_ScoreMax", DbType="Int")]
		public System.Nullable<int> ScoreMax
		{
			get
			{
				return this._ScoreMax;
			}
			set
			{
				if ((this._ScoreMax != value))
				{
					this.OnScoreMaxChanging(value);
					this.SendPropertyChanging();
					this._ScoreMax = value;
					this.SendPropertyChanged("ScoreMax");
					this.OnScoreMaxChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Association(Name="GameEvent_MatchEvent", Storage="_MatchEvents", OtherKey="GameEventID")]
		public EntitySet<MatchEvent> MatchEvents
		{
			get
			{
				return this._MatchEvents;
			}
			set
			{
				this._MatchEvents.Assign(value);
			}
		}
		
		[Association(Name="Game_GameEvent", Storage="_Game", ThisKey="GameID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.GameEvents.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.GameEvents.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchEvents(MatchEvent entity)
		{
			this.SendPropertyChanging();
			entity.GameEvent = this;
		}
		
		private void detach_MatchEvents(MatchEvent entity)
		{
			this.SendPropertyChanging();
			entity.GameEvent = null;
		}
	}
	
	[Table(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NickName;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<MatchParticipant> _MatchParticipants;
		
		private EntitySet<MatchEvent> _MatchEvents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Player()
		{
			this._MatchParticipants = new EntitySet<MatchParticipant>(new Action<MatchParticipant>(this.attach_MatchParticipants), new Action<MatchParticipant>(this.detach_MatchParticipants));
			this._MatchEvents = new EntitySet<MatchEvent>(new Action<MatchEvent>(this.attach_MatchEvents), new Action<MatchEvent>(this.detach_MatchEvents));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_NickName", DbType="VarChar(24) NOT NULL", CanBeNull=false)]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Association(Name="Player_MatchParticipant", Storage="_MatchParticipants", OtherKey="PlayerID")]
		public EntitySet<MatchParticipant> MatchParticipants
		{
			get
			{
				return this._MatchParticipants;
			}
			set
			{
				this._MatchParticipants.Assign(value);
			}
		}
		
		[Association(Name="Player_MatchEvent", Storage="_MatchEvents", OtherKey="PlayerID")]
		public EntitySet<MatchEvent> MatchEvents
		{
			get
			{
				return this._MatchEvents;
			}
			set
			{
				this._MatchEvents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchParticipants(MatchParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_MatchParticipants(MatchParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_MatchEvents(MatchEvent entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_MatchEvents(MatchEvent entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[Table(Name="dbo.Match")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GameID;
		
		private System.Nullable<System.DateTime> _MatchDate;
		
		private EntitySet<MatchParticipant> _MatchParticipants;
		
		private EntitySet<MatchEvent> _MatchEvents;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnMatchDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMatchDateChanged();
    #endregion
		
		public Match()
		{
			this._MatchParticipants = new EntitySet<MatchParticipant>(new Action<MatchParticipant>(this.attach_MatchParticipants), new Action<MatchParticipant>(this.detach_MatchParticipants));
			this._MatchEvents = new EntitySet<MatchEvent>(new Action<MatchEvent>(this.attach_MatchEvents), new Action<MatchEvent>(this.detach_MatchEvents));
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_MatchDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MatchDate
		{
			get
			{
				return this._MatchDate;
			}
			set
			{
				if ((this._MatchDate != value))
				{
					this.OnMatchDateChanging(value);
					this.SendPropertyChanging();
					this._MatchDate = value;
					this.SendPropertyChanged("MatchDate");
					this.OnMatchDateChanged();
				}
			}
		}
		
		[Association(Name="Match_MatchParticipant", Storage="_MatchParticipants", OtherKey="MatchID")]
		public EntitySet<MatchParticipant> MatchParticipants
		{
			get
			{
				return this._MatchParticipants;
			}
			set
			{
				this._MatchParticipants.Assign(value);
			}
		}
		
		[Association(Name="Match_MatchEvent", Storage="_MatchEvents", OtherKey="MatchID")]
		public EntitySet<MatchEvent> MatchEvents
		{
			get
			{
				return this._MatchEvents;
			}
			set
			{
				this._MatchEvents.Assign(value);
			}
		}
		
		[Association(Name="Game_Match", Storage="_Game", ThisKey="GameID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchParticipants(MatchParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_MatchParticipants(MatchParticipant entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_MatchEvents(MatchEvent entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_MatchEvents(MatchEvent entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
	}
	
	[Table(Name="dbo.MatchParticipant")]
	public partial class MatchParticipant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MatchID;
		
		private int _PlayerID;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMatchIDChanging(int value);
    partial void OnMatchIDChanged();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    #endregion
		
		public MatchParticipant()
		{
			this._Match = default(EntityRef<Match>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MatchID", DbType="Int NOT NULL")]
		public int MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[Column(Storage="_PlayerID", DbType="Int NOT NULL")]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[Association(Name="Match_MatchParticipant", Storage="_Match", ThisKey="MatchID", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.MatchParticipants.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.MatchParticipants.Add(this);
						this._MatchID = value.ID;
					}
					else
					{
						this._MatchID = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[Association(Name="Player_MatchParticipant", Storage="_Player", ThisKey="PlayerID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.MatchParticipants.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.MatchParticipants.Add(this);
						this._PlayerID = value.ID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MatchEvent")]
	public partial class MatchEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Quantity;
		
		private int _GameEventID;
		
		private int _MatchID;
		
		private int _PlayerID;
		
		private int _Score;
		
		private EntityRef<GameEvent> _GameEvent;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnGameEventIDChanging(int value);
    partial void OnGameEventIDChanged();
    partial void OnMatchIDChanging(int value);
    partial void OnMatchIDChanged();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnScoreChanging(int value);
    partial void OnScoreChanged();
    #endregion
		
		public MatchEvent()
		{
			this._GameEvent = default(EntityRef<GameEvent>);
			this._Match = default(EntityRef<Match>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_GameEventID", DbType="Int NOT NULL")]
		public int GameEventID
		{
			get
			{
				return this._GameEventID;
			}
			set
			{
				if ((this._GameEventID != value))
				{
					if (this._GameEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameEventIDChanging(value);
					this.SendPropertyChanging();
					this._GameEventID = value;
					this.SendPropertyChanged("GameEventID");
					this.OnGameEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_MatchID", DbType="Int NOT NULL")]
		public int MatchID
		{
			get
			{
				return this._MatchID;
			}
			set
			{
				if ((this._MatchID != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIDChanging(value);
					this.SendPropertyChanging();
					this._MatchID = value;
					this.SendPropertyChanged("MatchID");
					this.OnMatchIDChanged();
				}
			}
		}
		
		[Column(Storage="_PlayerID", DbType="Int NOT NULL")]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Score", DbType="Int NOT NULL")]
		public int Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[Association(Name="GameEvent_MatchEvent", Storage="_GameEvent", ThisKey="GameEventID", IsForeignKey=true)]
		public GameEvent GameEvent
		{
			get
			{
				return this._GameEvent.Entity;
			}
			set
			{
				GameEvent previousValue = this._GameEvent.Entity;
				if (((previousValue != value) 
							|| (this._GameEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameEvent.Entity = null;
						previousValue.MatchEvents.Remove(this);
					}
					this._GameEvent.Entity = value;
					if ((value != null))
					{
						value.MatchEvents.Add(this);
						this._GameEventID = value.ID;
					}
					else
					{
						this._GameEventID = default(int);
					}
					this.SendPropertyChanged("GameEvent");
				}
			}
		}
		
		[Association(Name="Match_MatchEvent", Storage="_Match", ThisKey="MatchID", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.MatchEvents.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.MatchEvents.Add(this);
						this._MatchID = value.ID;
					}
					else
					{
						this._MatchID = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[Association(Name="Player_MatchEvent", Storage="_Player", ThisKey="PlayerID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.MatchEvents.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.MatchEvents.Add(this);
						this._PlayerID = value.ID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
